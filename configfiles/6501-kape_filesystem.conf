# SOF-ELKÂ® Configuration File
# Author: Phil Hagen
# Email: phil@lewestech.com
#
# (C)2019 Lewes Technology Consulting, LLC
#
# This conf file accepts logs from the KAPE forensic tool

filter {
  if [type] == "kape_filesystem" and "json" not in [tags] {
    mutate {
      # create two "timestamp" fields with the MACBs in subfields
      # create a KAPE-specific bit field
      # promote the remaining fields of interest out of the [raw] placeholder
      # remove the [raw] placeholder

      rename => {
        "[raw][LastRecordChange0x10]" => "[STDINFO][LastRecordChange]"
        "[raw][LastModified0x10]" => "[STDINFO][LastModified]"
        "[raw][LastAccess0x10]" => "[STDINFO][LastAccess]"
        "[raw][Created0x10]" => "[STDINFO][Created]"

        "[raw][LastRecordChange0x30]" => "[FILENAME][LastRecordChange]"
        "[raw][LastModified0x30]" => "[FILENAME][LastModified]"
        "[raw][LastAccess0x30]" => "[FILENAME][LastAccess]"
        "[raw][Created0x30]" => "[FILENAME][Created]"

        "[raw][InUse]" => "[KAPEFileInfo][InUse]"
        "[raw][IsDirectory]" => "[KAPEFileInfo][IsDirectory]"
        "[raw][HasAds]" => "[KAPEFileInfo][HasAds]"
        "[raw][IsAds]" => "[KAPEFileInfo][IsAds]"
        "[raw][Timestomped]" => "[KAPEFileInfo][Timestomped]"
        "[raw][Copied]" => "[KAPEFileInfo][Copied]"

        "[raw][SiFlags]" => "SiFlags"
        "[raw][EntryNumber]" => "EntryNumber"
        "[raw][SequenceNumber]" => "SequenceNumber"
        "[raw][ParentEntryNumber]" => "ParentEntryNumber"
        "[raw][ParentSequenceNumber]" => "ParentSequenceNumber"
        "[raw][ParentPath]" => "ParentPath"
        "[raw][FileName]" => "FileName"
        "[raw][Extension]" => "Extension"
        "[raw][FileSize]" => "FileSize"
        "[raw][ReferenceCount]" => "ReferenceCount"
        "[raw][ReparseTarget]" => "ReparseTarget"
        "[raw][NameType]" => "NameType"
        "[raw][UpdateSequenceNumber]" => "UpdateSequenceNumber"
        "[raw][LogfileSequenceNumber]" => "LogfileSequenceNumber"
        "[raw][SecurityId]" => "SecurityId"
        "[raw][ObjectIdFileDroid]" => "ObjectIdFileDroid"
        "[raw][LoggedUtilStream]" => "LoggedUtilStream"
        "[raw][ZoneIdContents]" => "ZoneIdContents"
      }
      remove_field => [ "raw" ]
    }

    # use the STDINFO LastModified time for @timestamp
    date {
      match => [ "[STDINFO][LastModified]", "ISO8601" ]
    }

    # convert all STDINFO timestamps to date/time types
    date {
      match => [ "[STDINFO][LastRecordChange]", "ISO8601" ]
      target => "[STDINFO][LastRecordChange]"
    }
    date {
      match => [ "[STDINFO][LastModified]", "ISO8601" ]
      target => "[STDINFO][LastModified]"
    }
    date {
      match => [ "[STDINFO][LastAccess]", "ISO8601" ]
      target => "[STDINFO][LastAccess]"
    }
    date {
      match => [ "[STDINFO][Created]", "ISO8601" ]
      target => "[STDINFO][Created]"
    }

    # convert all FILENAME timestamps to date/time types
    date {
      match => [ "[FILENAME][LastRecordChange]", "ISO8601" ]
      target => "[FILENAME][LastRecordChange]"
    }
    date {
      match => [ "[FILENAME][LastModified]", "ISO8601" ]
      target => "[FILENAME][LastModified]"
    }
    date {
      match => [ "[FILENAME][LastAccess]", "ISO8601" ]
      target => "[FILENAME][LastAccess]"
    }
    date {
      match => [ "[FILENAME][Created]", "ISO8601" ]
      target => "[FILENAME][Created]"
    }

    # convert SiFlags to true/false array
    ruby {
      path => "/usr/local/sof-elk/supporting-scripts/ntfs_flags_to_array.rb"
      script_params => { "source_field" => "SiFlags" }
    }
  }
}
